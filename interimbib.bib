@misc{FindBugs,
abstract = {This is the web page for FindBugs, a program which uses static analysis to look for bugs in Java code.},
pages = {1--6},
title = {{FindBugs - Find Bugs in Java Programs}},
url = {http://findbugs.sourceforge.net/},
howpublished = {\url{http://findbugs.sourceforge.net/}},
note = {Accessed on 2020-01-23},
urldate = {2020-01-23},
year = {2015}
}
@misc{godocs,
title = {{Documentation - The Go Programming Language}},
url = {https://golang.org/doc/},
urldate = {2020-01-23},
howpublished = {\url{https://golang.org/doc/}},
note = {Accessed on 2020-01-23}
}
@misc{gousers,
title = {{GoUsers - Companies currently using Go throughout the world}},
url = {https://github.com/golang/go/wiki/GoUsers},
urldate = {2020-06-13},
howpublished = {\url{https://github.com/golang/go/wiki/GoUsers}},
note = {Accessed on 2020-06-13}
}
@misc{tourofgo,
title = {{Tour of Go - Select}},
url = {https://tour.golang.org/concurrency/5},
urldate = {2020-06-13},
howpublished = {\url{https://tour.golang.org/concurrency/5}},
note = {Accessed on 2020-06-13}
}
@misc{JLint,
title = {{Jlint - Find Bugs in Java Programs}},
url = {http://jlint.sourceforge.net/},
howpublished = {\url{http://jlint.sourceforge.net/}},
note = {Accessed on 2020-01-23},
urldate = {2020-01-23}
}
@techreport{sharedmemory,
author = {Adve, Sarita V and Gharachorloo, Kourosh},
file = {:Users/becharrens/Library/Application Support/Mendeley Desktop/Downloaded/Adve, Gharachorloo - 1995 - Shared Memory Consistency Models A Tutorial.pdf:pdf},
title = {{Shared Memory Consistency Models: A Tutorial}},
url = {https://www.hpl.hp.com/techreports/Compaq-DEC/WRL-95-7.pdf},
year = {1995}
}
@inproceedings{logicaassertions,
abstract = {Design by Contract (DbC) promotes reliable software development through elaboration of type signatures for sequential programs with logical predicates. This paper presents an assertion method, based on the {\$}\pi{\$}-calculus with full recursion, which generalises the notion of DbC to multiparty distributed interactions to enable effective specification and verification of distributed multiparty protocols. Centring on global assertions and their projections onto endpoint assertions, our method allows clear specifications for typed sessions, constraining the content of the exchanged messages, the choice of sub-conversations to follow, and invariants on recursions. The paper presents key theoretical foundations of this framework, including a sound and relatively complete compositional proof system for verifying processes against assertions.},
address = {Berlin, Heidelberg},
author = {Bocchi, Laura and Honda, Kohei and Tuosto, Emilio and Yoshida, Nobuko},
booktitle = {CONCUR 2010 - Concurrency Theory},
editor = {Gastin, Paul and Laroussinie, Fran{\c{c}}ois},
isbn = {978-3-642-15375-4},
pages = {162--176},
publisher = {Springer Berlin Heidelberg},
title = {{A Theory of Design-by-Contract for Distributed Multiparty Interactions}},
year = {2010}
}
@techreport{asyncandpicalc,
author = {Boudol, G{\'{e}}rard},
institution = {INRIA},
keywords = {Non disponible sur le PDF},
number = {RR-1702},
pages = {15},
title = {{Asynchrony and the Pi-calculus}},
type = {Research Report},
url = {https://hal.inria.fr/inria-00076939},
year = {1992}
}
@inproceedings{parametrictypes,
author = {Castro, David and Hu, Raymond and Jongmans, Sung-Shik and Ng, Nicholas and Yoshida, Nobuko},
booktitle = {46th ACM SIGPLAN Symposium on Principles of Programming Languages},
doi = {10.1145/3290342},
pages = {29:1----29:30},
publisher = {ACM},
title = {{Distributed Programming Using Role Parametric Session Types in Go}},
volume = {3},
year = {2019}
}
@inproceedings{subtyping,
author = {Chen, Tzu-Chun and Dezani-Ciancaglini, Mariangiola and Yoshida, Nobuko},
booktitle = {16th International Symposium on Principles and Practice of Declarative Programming},
doi = {10.1145/2643135.2643138},
pages = {135--146},
publisher = {ACM},
title = {{On the Preciseness of Subtyping in Session Types}},
year = {2014}
}
@inproceedings{gentleintrotompst,
author = {Coppo, Mario and Dezani-Ciancaglini, Mariangiola and Padovani, Luca and Yoshida, Nobuko},
booktitle = {15th International School on Formal Methods for the Design of Computer, Communication and Software Systems: Multicore Programming},
doi = {10.1007/978-3-319-18941-3_4},
pages = {146--178},
publisher = {Springer},
series = {LNCS},
title = {{A Gentle Introduction to Multiparty Asynchronous Session Types}},
volume = {9104},
year = {2015}
}
@inproceedings{nestedprotocols,
abstract = {We propose an improvement to session-types, introducing nested protocols, the possibility to call a subprotocol from a parent protocol. This feature adds expressiveness and modularity to the existing session-type theory, allowing arguments to be passed and enabling higher-order protocols definition. Our theory is introduced through a new type system for protocols handling subprotocol calls, and its implementation in a session-calculus. We propose validation and satisfaction relations between specification and implementation. Sound behaviour is enforced thanks to the usage of kinds and well-formedness, allowing us to ensure progress and subject reduction. In addition, we describe an extension of our framework allowing subprotocols to send back results.},
address = {Berlin, Heidelberg},
author = {Demangeon, Romain and Honda, Kohei},
booktitle = {CONCUR 2012 -- Concurrency Theory},
editor = {Koutny, Maciej and Ulidowski, Irek},
isbn = {978-3-642-32940-1},
pages = {272--286},
publisher = {Springer Berlin Heidelberg},
title = {{Nested Protocols in Session Types}},
year = {2012}
}
@inproceedings{multirolesessiontypes,
author = {Deni{\'{e}}lou, Pierre-Malo and Yoshida, Nobuko},
booktitle = {38th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
doi = {10.1145/1926385.1926435},
pages = {435--446},
publisher = {ACM},
title = {{Dynamic multirole session types}},
year = {2011}
}
@inproceedings{erlang,
author = {Fowler, Simon},
booktitle = {Proceedings 9th Interaction and Concurrency Experience, {\{}ICE{\}} 2016, Heraklion, Greece, 8-9 June 2016},
doi = {10.4204/EPTCS.223.3},
pages = {36--50},
title = {{An Erlang Implementation of Multiparty Session Actors}},
url = {https://doi.org/10.4204/EPTCS.223.3},
year = {2016}
}
@inproceedings{binarysessiontypes1,
abstract = {We introduce basic language constructs and a type discipline as a foundation of structured communication-based concurrent programming. The constructs, which are easily translatable into the summation-less asynchronous {\$}\pi{\$}-calculus, allow programmers to organise programs as a combination of multiple flows of (possibly unbounded) reciprocal interactions in a simple and elegant way, subsuming the preceding communication primitives such as method invocation and rendez-vous. The resulting syntactic structure is exploited by a type discipline {\`{a}} la ML, which offers a high-level type abstraction of interactive behaviours of programs as well as guaranteeing the compatibility of interaction patterns between processes in a well-typed program. After presenting the formal semantics, the use of language constructs is illustrated through examples, and the basic syntactic results of the type discipline are established. Implementation concerns are also addressed.},
address = {Berlin, Heidelberg},
author = {Honda, Kohei and Vasconcelos, Vasco T and Kubo, Makoto},
booktitle = {Programming Languages and Systems},
editor = {Hankin, Chris},
isbn = {978-3-540-69722-0},
pages = {122--138},
publisher = {Springer Berlin Heidelberg},
title = {{Language primitives and type discipline for structured communication-based programming}},
year = {1998}
}
@inproceedings{asyncmpst1,
address = {New York, NY, USA},
author = {Honda, Kohei and Yoshida, Nobuko and Carbone, Marco},
booktitle = {Proceedings of the 35th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
doi = {10.1145/1328438.1328472},
isbn = {9781595936899},
keywords = {causality,choreography,communications,mobile processes,multiparty,session types,structured programming},
pages = {273--284},
publisher = {Association for Computing Machinery},
series = {POPL '08},
title = {{Multiparty Asynchronous Session Types}},
url = {https://doi.org/10.1145/1328438.1328472},
year = {2008}
}
@article{asyncmpst2,
author = {Honda, Kohei and Yoshida, Nobuko and Carbone, Marco},
doi = {10.1145/2827695},
issn = {0004-5411},
journal = {J. ACM},
keywords = {Session types,global protocols,global types,progress,projection,the pi-calculus},
month = {mar},
number = {1},
publisher = {Association for Computing Machinery},
title = {{Multiparty Asynchronous Session Types}},
url = {https://doi.org/10.1145/2827695},
volume = {63},
year = {2016}
}
@inproceedings{java,
author = {Hu, Raymond and Yoshida, Nobuko},
booktitle = {19th International Conference on Fundamental Approaches to Software Engineering},
doi = {10.1007/978-3-662-49665-7_24},
pages = {401--418},
publisher = {Springer},
series = {LNCS},
title = {{Hybrid Session Verification through Endpoint API Generation}},
volume = {9633},
year = {2016}
}
@inproceedings{ConcurrencyTools,
author = {Kester, D and Mwebesa, M and Bradbury, J S},
booktitle = {2010 10th IEEE Working Conference on Source Code Analysis and Manipulation},
doi = {10.1109/SCAM.2010.26},
issn = {null},
keywords = {Java,concurr,program debugging,program diagnostics},
pages = {115--124},
title = {{How Good is Static Analysis at Finding Concurrency Bugs?}},
year = {2010}
}
@inproceedings{turingcomplete,
abstract = {This paper exhibits accurate encodings of the {\$}\lambda{\$}-calculus in the {\$}\pi{\$}-calculus. The former is canonical for calculation with functions, while the latter is a recent step [15] towards a canonical treatment of concurrent processes. With quite simple encodings, two {\$}\lambda{\$}-calculus reduction strategies are simulated very closely; each reduction in {\$}\lambda{\$}-calculus is mimicked by a short sequence of reductions in {\$}\pi{\$}-calculus. Abramsky's precongruence of applicative simulation [1] over {\$}\lambda{\$}-calculus is compared with that induced by the encoding of the lazy {\$}\lambda{\$}-calculus into {\$}\pi{\$}-calculus; a similar comparison is made for call-by-value {\$}\lambda{\$}-calculus.},
address = {Berlin, Heidelberg},
author = {Milner, Robin},
booktitle = {Automata, Languages and Programming},
editor = {Paterson, Michael S},
isbn = {978-3-540-47159-2},
pages = {167--180},
publisher = {Springer Berlin Heidelberg},
title = {{Functions as processes}},
year = {1990}
}
@book{milnerpicalc,
author = {Milner, Robin},
publisher = {Cambridge University Press},
title = {{Communicating and Mobile Systems: The $\pi$-Calculus}},
year = {1999}
}
@inproceedings{python,
author = {Neykova, Rumyana},
booktitle = {5th International Workshop on Programming Language Approaches to Concurrency and Communication-cEntric Software},
doi = {10.4204/EPTCS.137.8},
pages = {95--102},
publisher = {Open Publishing Association},
series = {EPTCS},
title = {{Session Types Go Dynamic or How to Verify Your Python Conversations}},
volume = {137},
year = {2013}
}
@article{featherweight,
author = {Neykova, Rumyana and Yoshida, Nobuko},
doi = {10.1007/978-3-030-21485-2 14},
journal = {Models, Languages, and Tools for Concurrent and Distributed Programming},
pages = {236--259},
publisher = {Springer},
title = {{Featherweight Scribble}},
volume = {11665},
year = {2019}
}
@inproceedings{mpstc,
abstract = {This paper presents a new efficient programming toolchain for message-passing parallel algorithms which can fully ensure, for any typable programs and for any execution path, deadlock-freedom, communication safety and global progress through a static checking. The methodology is embodied as a multiparty session-based programming environment for C and its runtime libraries, which we call Session C. Programming starts from specifying a global protocol for a target parallel algorithm, using a protocol description language. From this global protocol, the projection algorithm generates endpoint protocols, based on which each endpoint C program is designed and implemented with a small number of concise session primitives. The endpoint protocol can further be refined to a more optimised protocol through subtyping for asynchronous communication, preserving original safety guarantees. The underlying theory can ensure that the complexity of the toolchain stays in polynomial time against the size of programs. We apply this framework to representative parallel algorithms with complex communication topologies. The benchmark results show that Session C performs competitively against MPI.},
address = {Berlin, Heidelberg},
author = {Ng, Nicholas and Yoshida, Nobuko and Honda, Kohei},
booktitle = {Objects, Models, Components, Patterns},
editor = {Furia, Carlo A and Nanz, Sebastian},
isbn = {978-3-642-30561-0},
pages = {202--218},
publisher = {Springer Berlin Heidelberg},
title = {{Multiparty Session C: Safe Parallel Programming with Message Optimisation}},
year = {2012}
}
@inproceedings{verygentleintrotompst,
abstract = {Multiparty session types (MPST) are a formal specification and verification framework for message-passing protocols without central control: the desired interactions at the scale of the network itself are specified into a session (called global type). Global types are then projected onto local types (one for each participant), which describe the protocol from a local point of view. These local types are used to validate an application through type-checking, monitoring, and code generation. Theory of session types guarantees that local conformance of all participants induces global conformance of the network to the initial global type. This paper provides a very gentle introduction of the simplest version of multiparty session types for readers who are not familiar with session types nor process calculi.},
address = {Cham},
author = {Yoshida, Nobuko and Gheri, Lorenzo},
booktitle = {Distributed Computing and Internet Technology},
editor = {Hung, Dang Van and D$\backslash$textasciiacuteSouza, Meenakshi},
isbn = {978-3-030-36987-3},
pages = {73--93},
publisher = {Springer International Publishing},
title = {{A Very Gentle Introduction to Multiparty Session Types}},
year = {2020}
}
@inproceedings{scribble,
author = {Yoshida, Nobuko and Hu, Raymond and Neykova, Rumyana and Ng, Nicholas},
booktitle = {8th International Symposium on Trustworthy Global Computing},
doi = {10.1007/978-3-319-05119-2_3},
pages = {22--41},
publisher = {Springer},
series = {LNCS},
title = {{The Scribble Protocol Language}},
volume = {8358},
year = {2013}
}
@misc{co406,
author = {Yoshida, Nobuko and Zhou, Fangyi and Ferreira, Francisco},
title = {{C406 Concurrent Processes Course Materials, Imperial College London}},
year = {2019}
}
@misc{CLBG,
note = {Accessed on 2020/01/23},
title = {{Computer Language Benchmarks Game}},
url = {https://benchmarksgame-team.pages.debian.net/benchmarksgame/index.html},
howpublished = {\url{https://benchmarksgame-team.pages.debian.net/benchmarksgame/index.html}},
urldate = {2020-01-23}
}
@inproceedings{scribble-callbacks,
author = {Ng, Nicholas and Coutinho, Jose G F and Yoshida, Nobuko},
booktitle = {24th International Conference on Compiler Construction},
doi = {10.1007/978-3-662-46663-6_11},
pages = {212--232},
publisher = {Springer},
series = {LNCS},
title = {{Protocols by Default: Safe MPI Code Generation based on Session Types}},
volume = {9031},
year = {2015}
}